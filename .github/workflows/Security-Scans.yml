name: Security Scans Integration
on:
  push:
    branches:
      - main

jobs:
  sonarcloud:
    name: Security Scans
    runs-on: ubuntu-latest
    permissions:
      issues: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' 

      - name: Install dependencies
        run: |
          npm install

      - name: Run Jest tests with coverage
        run: |
          npm test -- --coverage

      - name: Upload Jest coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Jest Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/lcov-report/index.html

      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Generate SonarQube JSON Report
        run: |
          curl -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/measures/component_tree?component=vivek28058_Skillviz_BE&metricKeys=ncloc,complexity,violations,bugs,vulnerabilities,code_smells" \
            -o sonar_report.json
        shell: bash

      #- name: SonarQube Quality Gate check
      #  id: sonarqube-quality-gate-check
      #  uses: sonarsource/sonarqube-quality-gate-action@master
      #  timeout-minutes: 5
      #  env:
      #   SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload SonarQube Report
        uses: actions/upload-artifact@v4
        with:
           name: sonar-report
           path: sonar_report.json

      - name: Build Docker Image
        run: |
          docker build -t myapp:latest .
        env:
          DOCKER_BUILDKIT: 1

      - name: Install Snyk
        run: npm install -g snyk

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Dependencies Scan
        id: snyk-scan
        run: |
          snyk test --all-projects --json > snyk_report.json || true
        shell: bash

      - name: Debug Snyk JSON Output
        run: |
          echo "Printing snyk_report.json:"
          cat snyk_report.json
          echo "Formatted output using jq:"
          jq '.' snyk_report.json
        shell: bash

      - name: Monitor Snyk SCA Scan
        run: snyk monitor --all-projects
        continue-on-error: true

      - name: Check for Medium, High, and Critical Severity Issues
        id: snyk-check
        run: |
          # Output the structure of the JSON report to debug
          cat snyk_report.json

          # Check medium, high, and critical issues
          medium_issues=$(jq '[.vulnerabilities[] | select(.severity == "medium")] | length' snyk_report.json)
          high_issues=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' snyk_report.json)
          critical_issues=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' snyk_report.json)

          # Display results
          echo "Medium issues: $medium_issues"
          echo "High issues: $high_issues"
          echo "Critical issues: $critical_issues"

          # Fail job if critical issues exist
          if [ "$critical_issues" -gt 0 ]; then
            echo "Job failed: Found $critical_issues critical severity issues."
            exit 1
          else
            echo "No critical severity issues found."
            echo "Medium issues: $medium_issues"
            echo "High issues: $high_issues"
            echo "Job passed despite $((medium_issues + high_issues)) medium and high severity issues."
          fi
        shell: bash

      - name: Upload Snyk Report
        uses: actions/upload-artifact@v4
        with:
            name: snyk-report
            path: snyk_report.json

      #- name: Scan Docker Image
       # run: |
         # snyk container test myapp:latest --severity-threshold=medium --json --file=Dockerfile --project-name=SkillsViz > snyk_scan_results.json
        #  cat snyk_scan_results.json  # Display the scan results in the console

      - name: Scan Docker Image (Allow Failures)
        run: |
          snyk container test myapp:latest --severity-threshold=medium --json --file=Dockerfile --project-name=SkillsViz > snyk_scan_results.json || true
          cat snyk_scan_results.json
    
      - name: Upload Snyk Scan Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Docker-results
          path: snyk_scan_results.json

      - name: Monitor Snyk Docker Project
        run: |
          snyk monitor --docker myapp:latest --project-name=SkillsViz
          
      - name: ZAP Dynamic Analysis Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: 'http://www.itsecgames.com/'
          rules_file_name: '.github/workflows/rules.zap'
          cmd_options: '-J zap_report.json -w report_md.md -r report_html.html'
          fail_action: true

      # - name: Debug ZAP JSON Output
      #   run: |
      #     echo "ZAP JSON Report:"
      #     cat zap_report.json
      #     echo "Formatted ZAP JSON Output:"
      #     jq '.' zap_report.json
      #   shell: bash

      # - name: Upload ZAP Reports
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: zap-reports
      #     path: |
      #       zap_report.json

      - name: Run AppSweep Scan
        id: appsweep-scan
        uses: guardsquare/appsweep-action@main
        with:
          appsweep_api_key: ${{ secrets.APPSWEEP_API_KEY }}
          input_file: Demo.apk
